
library(tm)

library(readxl)


path <- "C:/Users/kahn/Documents/Book2.xlsx"
aFile <- read_excel(path)

test2<-as.matrix(aFile)
colnames(test2)<-NULL
genelist<-c("Fkh2","Swi5","Sic11","Sic12","Sic13","Sic14","Sic15","Sic16","Sic17","Sic18","Sic19")
rownames(test2)<-genelist

my_pca <- prcomp(test2, scale = TRUE,
                center = TRUE, retx = T)


df <- data.frame(aFile)

> test1<-read.table(text="
> 0.141  0.242  0.342
> 0.224  0.342  0.334
> 0.652  0.682  0.182
> ",sep="",header=FALSE)
>  #Read data
> test1
>  #   V1    V2    V3
> #1 0.141 0.242 0.342
> #2 0.224 0.342 0.334
> #3 0.652 0.682 0.182
> 
> 
> #Convert to matrix as it is that you wanted
> test2<-as.matrix(test1)
> colnames(test2)<-NULL
> genelist<-c("Fkh2","Swi5","Sic11","Sic12","Sic13","Sic14","Sic15","Sic16","Sic17","Sic18","Sic19")
> rownames(test2)<-genelist
> test2
> #      [,1]  [,2]  [,3]
> #Fkh2 0.141 0.242 0.342
> #Swi5 0.224 0.342 0.334
> #Sic1 0.652 0.682 0.182
> 
> #2nd case: As in your example,
> test1<-read.table(text="
> IMAGE:152 0.141  0.242  0.342
> IMAGE:262 0.224  0.342  0.334
> IMAGE:342 0.652  0.682  0.182
> ",sep="",header=FALSE)
> 
> test2<-as.matrix(test1[-1])
> colnames(test2)<-NULL
> genelist<-c("Fkh2","Swi5","Sic1")
> rownames(test2)<-genelist
> test2
> #      [,1]  [,2]  [,3]
> #Fkh2 0.141 0.242 0.342
> #Swi5 0.224 0.342 0.334
> #Sic1 0.652 0.682 0.182
> 



# Loading Data
data(mtcars)
 
# Apply PCA using prcomp function
# Need to scale / Normalize as
# PCA depends on distance measure
my_pca <- prcomp(mtcars, scale = TRUE,
                center = TRUE, retx = T)
names(my_pca)
 
# Summary
summary(my_pca)
my_pca
 
# View the principal component loading
# my_pca$rotation[1:5, 1:4]
my_pca$rotation
 
# See the principal components
dim(my_pca$x)
my_pca$x
 
# Plotting the resultant principal components
# The parameter scale = 0 ensures that arrows
# are scaled to represent the loadings
biplot(my_pca, main = "Biplot", scale = 0)
 
# Compute standard deviation
my_pca$sdev
 
# Compute variance
my_pca.var <- my_pca$sdev ^ 2
my_pca.var
 
# Proportion of variance for a scree plot
propve <- my_pca.var / sum(my_pca.var)
propve
 
# Plot variance explained for each principal component
plot(propve, xlab = "principal component",
            ylab = "Proportion of Variance Explained",
            ylim = c(0, 1), type = "b",
            main = "Scree Plot")
 
# Plot the cumulative proportion of variance explained
plot(cumsum(propve),
    xlab = "Principal Component",
    ylab = "Cumulative Proportion of Variance Explained",
    ylim = c(0, 1), type = "b")
 
# Find Top n principal component
# which will atleast cover 90 % variance of dimension
which(cumsum(propve) >= 0.9)[1]
 
# Predict mpg using first 4 new Principal Components
# Add a training set with principal components
train.data <- data.frame(disp = mtcars$disp, my_pca$x[, 1:4])
 
# Running a Decision tree algporithm
## Installing and loading packages
install.packages("rpart")
install.packages("rpart.plot")
library(rpart)
library(rpart.plot)
 
rpart.model <- rpart(disp ~ .,
                    data = train.data, method = "anova")
 
rpart.plot(rpart.model)
